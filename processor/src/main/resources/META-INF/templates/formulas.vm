package $package;

import java.math.BigDecimal;
import java.util.logging.Logger;

import javax.annotation.Generated;

import org.bitbucket.easymath.AbstractFormulas;
import org.bitbucket.easymath.logging.FormulaLogSupplier;

@Generated("$generator")
public class $classname extends AbstractFormulas {

    private static Logger logger = Logger.getLogger(${classname}.class.getName());

	#foreach( $constant in ${constants} )
	  #declareConstant( ${constant.type} ${constant} ${constant.operand} )
	#end

    public $classname() {
        super();
    }

#foreach( $function in ${functions} )
    /**
     * Formula: ${function.name}=${function.formula}
     */
    public ${function.type} compute${utils.capitalize($function.name)}(
        #typedArguments( ${function.inputs} )) {
        #if( ${function.inputs.empty} )
          logger.entering(getClass().getName(), "compute${utils.capitalize($function.name)}");
        #else
          logger.entering(getClass().getName(), "compute${utils.capitalize($function.name)}", new Object[] {#arguments( ${function.inputs} )});
        #end
        
        #check( ${function.type} ${function.inputs} )
        
        // Operations
        #if( ${function.inputs.empty} )
          logger.finest("${function.formula}");
        #else
          logger.finest(new FormulaLogSupplier("${function.formulaFormat}", #arguments( ${function.inputs} )));
        #end
        #foreach( $operation in ${function.operations} )
          #declareOperation( $operation )
        #end
        
        logger.exiting(getClass().getName(), "compute${utils.capitalize($function.name)}", ${function.lastOperation});
        return ${function.lastOperation};
    }
    
#end
}
## ----------------------------------------------------------------------------
## arguments
## ----------------------------------------------------------------------------
#macro( arguments $inputs )
  #foreach( $input in $inputs )
    ${input}#if( ${foreach.hasNext} ), #end
  #end
#end
## ----------------------------------------------------------------------------
## typedArguments
## ----------------------------------------------------------------------------
#macro( typedArguments $inputs )
  #foreach( $input in $inputs )
    ${input.type} ${input}#if( ${foreach.hasNext} ), #end
  #end
#end
## ----------------------------------------------------------------------------
## check
## ----------------------------------------------------------------------------
#macro( check $type $inputs )
  #if( $type == "BigDecimal" )
    // Method protection block
    #foreach( $input in $inputs )
      if ($input == null) {
          throw new IllegalArgumentException("Argument '$input' cannot be null.");
      }
    #end
  #end
#end
## ----------------------------------------------------------------------------
## declareConstant
## ----------------------------------------------------------------------------
#macro( declareConstant $type $name $text )
  #if( $type == "double" )
    private static final $type $name = ${text}D;
  #else
    private static final $type $name = new BigDecimal("$text");
  #end
#end
## ----------------------------------------------------------------------------
## declareOperation
## ----------------------------------------------------------------------------
#macro( declareOperation $operation )
  #if( ${operation.operands.size()} == 1 )
    #declareUnary( $operation )
  #else
    #declareBinary( $operation )
  #end
#end
## ----------------------------------------------------------------------------
## declareUnary
## ----------------------------------------------------------------------------
#macro( declareUnary $operation )
  #if( ${operation.type} == "double" )
    #if( ${operation.operator} == '!' )
      ${operation.type} ${operation} = fat(${operation.operand});
    #else
      ${operation.type} ${operation} = ${operation.operand} * (${operation.operator}1);
    #end
  #else
    #if( ${operation.operator} == '!' )
      ${operation.type} ${operation} = fat(${operation.operand});
    #elseif( ${operation.operator} == '-' )
      ${operation.type} ${operation} = ${operation.operand}.multiply(BigDecimal.ONE.negate());
    #else
      ${operation.type} ${operation} = ${operation.operand};
    #end
  #end
#end
## ----------------------------------------------------------------------------
## declareBinary
## ----------------------------------------------------------------------------
#macro( declareBinary $operation )
  #if( ${operation.type} == "double" )
    #if( ${operation.operator} == '^' )
      ${operation.type} ${operation} = pow(${operation.leftOperand}, ${operation.rightOperand});
    #elseif( ${operation.operator} == '*' )
      ${operation.type} ${operation} = ${operation.leftOperand} * ${operation.rightOperand};
    #elseif( ${operation.operator} == '/' )
      ${operation.type} ${operation} = ${operation.leftOperand} / ${operation.rightOperand};
    #elseif( ${operation.operator} == '%' )
      ${operation.type} ${operation} = ${operation.leftOperand} % ${operation.rightOperand};
    #elseif( ${operation.operator} == '+' )
      ${operation.type} ${operation} = ${operation.leftOperand} + ${operation.rightOperand};
    #elseif( ${operation.operator} == '-' )
      ${operation.type} ${operation} = ${operation.leftOperand} - ${operation.rightOperand};
    #else
      Operator '${operation.operator}' not found!!!!!!
    #end
  #else
    #if( ${operation.operator} == '^' )
      ${operation.type} ${operation} = pow(${operation.leftOperand}, ${operation.rightOperand});
    #elseif( ${operation.operator} == '*' )
      ${operation.type} ${operation} = ${operation.leftOperand}.multiply(${operation.rightOperand});
    #elseif( ${operation.operator} == '/' )
      ${operation.type} ${operation} = ${operation.leftOperand}.divide(${operation.rightOperand});
    #elseif( ${operation.operator} == '%' )
      ${operation.type} ${operation} = ${operation.leftOperand}.remainder(${operation.rightOperand});
    #elseif( ${operation.operator} == '+' )
      ${operation.type} ${operation} = ${operation.leftOperand}.add(${operation.rightOperand});
    #elseif( ${operation.operator} == '-' )
      ${operation.type} ${operation} = ${operation.leftOperand}.subtract(${operation.rightOperand});
    #else
      Operator '${operation.operator}' not found!!!!!!
    #end
  #end
#end