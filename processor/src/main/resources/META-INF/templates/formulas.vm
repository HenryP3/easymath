package ${package};

import javax.annotation.Generated;
import java.math.BigDecimal;

@Generated("${generator}")
public class ${classname} {

	#foreach( $type in ${constants.types} )
	  #foreach( $value in ${constants.getValues($type)} )
	    #declare( ${constants.declareType($type)} $value )
	  #end
	#end

    public ${classname}() {
        super();
    }

#foreach( $function in ${functions} )
    /**
     * Formula: ${function.name}=${function.formula}
     */
    public ${function.type} compute${utils.capitalize($function.name)}(
        #arguments( ${function.type} ${function.inputs} )) {
        #check( ${function.type} ${function.inputs} )
        
        // Default result
        #result( ${function.type} )
        
        return result;
    }
    
#end
}
## ----------------------------------------------------------------------------
## arguments
## ----------------------------------------------------------------------------
#macro( arguments $type $names )
  #foreach( $name in $names )
    $type $name
    #if( ${foreach.hasNext} ), #end
  #end
#end
## ----------------------------------------------------------------------------
## check
## ----------------------------------------------------------------------------
#macro( check $type $names )
  #if( $type == "BigDecimal" )
    // Method protection block
    #foreach( $name in $names )
      if ($name == null) {
          throw new IllegalArgumentException("Argument '$name' cannot be null.");
      }
    #end
  #end
#end
## ----------------------------------------------------------------------------
## result
## ----------------------------------------------------------------------------
#macro( result $type )
  #if( $type == "double" )
    double result = 0D;
  #else
    BigDecimal result = BigDecimal.ZERO;
  #end
#end
## ----------------------------------------------------------------------------
## declare
## ----------------------------------------------------------------------------
#macro( declare $type $value )
  #if( $type == "double" )
    private static final $type D${constants.declareValue($value)}  = ${value}D;
  #else
    private static final $type BD${constants.declareValue($value)} = new BigDecimal("${value}");
  #end
#end