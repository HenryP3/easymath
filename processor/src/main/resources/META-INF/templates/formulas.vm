package $package;

import java.math.MathContext;
import java.math.RoundingMode;
import java.math.BigDecimal;
import java.util.logging.Logger;

import javax.annotation.Generated;

import org.bitbucket.easymath.AbstractFormulas;
import org.bitbucket.easymath.logging.FormulaLogSupplier;

@Generated("$generator")
@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class $classname extends AbstractFormulas {

    private static Logger logger = Logger.getLogger(${classname}.class.getName());

	#foreach( $constant in ${constants} )
	  #declareConstant( $constant )
	#end

    public $classname() {
        super();
    }

#foreach( $function in ${functions} )
    /**
     * Formula: ${function.name}=${function.formula}
     */
    public ${function.type} compute${utils.capitalize($function.name)}( #typedArguments( $function )) {
        #logEntering( $function )
        #check( $function )
        
		#if( ${function.type} == "BigDecimal" )
		  MathContext mc = new MathContext(${function.precision}, RoundingMode.${function.roundingMode});
		#end
        
        // Operations
        #if( ${function.inputs.empty} )
          logger.finest("${function.formula}");
        #else
          logger.finest(new FormulaLogSupplier("${function.formulaFormat}", #arguments( ${function} )));
        #end
        #foreach( $operation in ${function.operations} )
          #declareOperation( $operation )
        #end
        
        logger.exiting(getClass().getName(), "compute${utils.capitalize($function.name)}", ${function.lastOperation});
        return ${function.lastOperation};
    }
    
#end
}
## ----------------------------------------------------------------------------
## arguments
## ----------------------------------------------------------------------------
#macro( arguments $function )
  #foreach( $input in ${function.inputs} )
    ${input.name}#if( ${foreach.hasNext} ), #end
  #end
#end
## ----------------------------------------------------------------------------
## typedArguments
## ----------------------------------------------------------------------------
#macro( typedArguments $function )
  #foreach( $input in ${function.inputs} )
    ${input.type} ${input.name}#if( ${foreach.hasNext} ), #end
  #end
#end
## ----------------------------------------------------------------------------
## logEntering
## ----------------------------------------------------------------------------
#macro( logEntering $function )
  #if( ${function.inputs.empty} )
    logger.entering(getClass().getName(), "compute${utils.capitalize(${function.name})}");
  #else
    logger.entering(getClass().getName(), "compute${utils.capitalize(${function.name})}", new Object[] {#arguments( ${function} )});
  #end
#end
## ----------------------------------------------------------------------------
## check
## ----------------------------------------------------------------------------
#macro( check $function )
  #if( ${function.type} == "BigDecimal" )
    // Method protection block
    #foreach( $input in ${function.inputs} )
      if (${input.name} == null) {
          throw new IllegalArgumentException("Argument '${input.name}' cannot be null.");
      }
    #end
  #end
#end
## ----------------------------------------------------------------------------
## declareConstant
## ----------------------------------------------------------------------------
#macro( declareConstant $constant )
  #if( ${constant.type} == "double" )
    private static final ${constant.type} ${constant.name} = ${constant.value}D;
  #else
    private static final ${constant.type} ${constant.name} = new BigDecimal("${constant.value}");
  #end
#end
## ----------------------------------------------------------------------------
## declareOperation
## ----------------------------------------------------------------------------
#macro( declareOperation $operation )
  #if( ${operation.operands.size()} == 1 )
    #declareUnary( $operation )
  #else
    #declareBinary( $operation )
  #end
#end
## ----------------------------------------------------------------------------
## declareUnary
## ----------------------------------------------------------------------------
#macro( declareUnary $operation )
  #if( ${operation.type} == "double" )
    #if( ${operation.operator} == '!' )
      ${operation.type} ${operation} = fat(${operation.operand.name});
    #else
      ${operation.type} ${operation} = ${operation.operand.name} * (${operation.operator}1);
    #end
  #else
    #if( ${operation.operator} == '!' )
      ${operation.type} ${operation} = fat(${operation.operand.name}, mc);
    #elseif( ${operation.operator} == '-' )
      ${operation.type} ${operation} = ${operation.operand.name}.multiply(BigDecimal.ONE.negate(), mc);
    #else
      ${operation.type} ${operation} = ${operation.operand.name};
    #end
  #end
#end
## ----------------------------------------------------------------------------
## declareBinary
## ----------------------------------------------------------------------------
#macro( declareBinary $operation )
  #if( ${operation.type} == "double" )
    #if( ${operation.operator} == '^' )
      ${operation.type} ${operation} = pow(${operation.leftOperand.name}, ${operation.rightOperand.name});
    #elseif( ${operation.operator} == '*' )
      ${operation.type} ${operation} = ${operation.leftOperand.name} * ${operation.rightOperand.name};
    #elseif( ${operation.operator} == '/' )
      ${operation.type} ${operation} = ${operation.leftOperand.name} / ${operation.rightOperand.name};
    #elseif( ${operation.operator} == '%' )
      ${operation.type} ${operation} = ${operation.leftOperand.name} % ${operation.rightOperand.name};
    #elseif( ${operation.operator} == '+' )
      ${operation.type} ${operation} = ${operation.leftOperand.name} + ${operation.rightOperand.name};
    #elseif( ${operation.operator} == '-' )
      ${operation.type} ${operation} = ${operation.leftOperand.name} - ${operation.rightOperand.name};
    #else
      Operator '${operation.operator}' not found!!!!!!
    #end
  #else
    #if( ${operation.operator} == '^' )
      ${operation.type} ${operation} = pow(${operation.leftOperand.name}, ${operation.rightOperand.name}, mc);
    #elseif( ${operation.operator} == '*' )
      ${operation.type} ${operation} = ${operation.leftOperand.name}.multiply(${operation.rightOperand.name}, mc);
    #elseif( ${operation.operator} == '/' )
      ${operation.type} ${operation} = ${operation.leftOperand.name}.divide(${operation.rightOperand.name}, mc);
    #elseif( ${operation.operator} == '%' )
      ${operation.type} ${operation} = ${operation.leftOperand.name}.remainder(${operation.rightOperand.name}, mc);
    #elseif( ${operation.operator} == '+' )
      ${operation.type} ${operation} = ${operation.leftOperand.name}.add(${operation.rightOperand.name}, mc);
    #elseif( ${operation.operator} == '-' )
      ${operation.type} ${operation} = ${operation.leftOperand.name}.subtract(${operation.rightOperand.name}, mc);
    #else
      Operator '${operation.operator}' not found!!!!!!
    #end
  #end
#end